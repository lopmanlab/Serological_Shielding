# Return
list(res)
})
names(ls.chains) = sapply(names(ls.chains)
, function(x) paste(strsplit(x, '_')[[1]][2]
, strsplit(strsplit(x, 'NVarsFit')[[1]][2], '_')[[1]][1]
, sep=''
, collapse=''))
# combine by name
temp.names = unique(names(ls.chains))
temp.chains = sapply(temp.names, function(x){
temp.in = ls.chains[names(ls.chains)==x]
res = do.call('rbind', temp.in)
return(list(res))
})
ls.chainComb = temp.chains
v.col_headers = colnames(df.constraints)
v.variables = v.col_headers[!v.col_headers %in% c('idx', 'i_chain', 'LogLikelihood', 'region', 'nVars')]
# (1) Pairplots -----------------------------------------------------------
# Contours
if(F){
for(REGION in c('nyc', 'sflor', 'wash')){
for(i in 2:11){
test = ls.chains[[REGION]]
test = test[test$i_chain == i,v.variables] # obtain variables
p_pairs = ggpairs(test, lower = list(continuous = "density"))
# Combinations
v.names = 1:ncol(test)
names(v.names) = colnames(test)
v.combs = t(combn(v.names, 2))
for(j in 1:nrow(v.combs)){
j_comb = v.combs[j,]
p_pairs[j_comb[2], j_comb[1]] = p_pairs[j_comb[2], j_comb[1]] +
scale_x_continuous(limits=c(df.constraints[j_comb[1]][1,1]
, df.constraints[j_comb[1]][2,1])) +
scale_y_continuous(limit=c(df.constraints[j_comb[2]][1,1]
, df.constraints[j_comb[2]][2,1]))
}
for(j in 1:ncol(test)){
p_pairs[j, j] = p_pairs[j, j] +
scale_x_continuous(limits=c(df.constraints[1,j]
, df.constraints[2,j]))
}
ggsave(paste('OUTPUT/MCMC Figures/', DATE, '_', REGION, '_countour_', i, '.png', sep='', collapse='')
, p_pairs
, 'png'
, width = 12
, height = 12)
}
}
}
# (2) Traceplots ----------------------------------------------------------
ls.plotChains = lapply(ls.chainComb, function(x){
n_rows = nrow(x)
n_vars = unique(x$nVars)
# Add constraints for plotting
temp_df = x
temp_vars = colnames(x)[colnames(x) %in% colnames(df.constraints)]
if(ADD_PLOT_CONSTRAINTS){
temp_df[n_rows+(1:2),] = temp_df[n_rows,] # duplicate last rows instead of rbind
temp_df[n_rows+(1:2), temp_vars] = df.constraints[,temp_vars]
temp_df[n_rows+(1:2), 'idx'] = NA
}
# melt
ret = melt(temp_df, c('idx', 'i_chain', 'LogLikelihood', 'region', 'nVars'))
ret$i_chain = as.character(ret$i_chain)
return(ret)
})
for(i_chain in names(ls.plotChains)){
temp.chains = ls.plotChains[[i_chain]]
p.traces = ggplot(temp.chains, aes(x = idx, y = value, color = i_chain)) +
theme_grey(base_size=14) +
geom_line(alpha = 0.5) +
facet_wrap('variable', scales = 'free') +
xlab('iterations') +
ggtitle(i_chain)
ggsave(paste('OUTPUT/MCMC Figures/', DATE, '_', i_chain, '_TracePlots.png', sep='', collapse='')
, p.traces, height = 8, width = 11)
if(INCLUDE_LOG_SCALE_TRACE){
p.traces_log = ggplot(temp.chains, aes(x = idx, y = value, color = i_chain)) +
theme_grey(base_size=14) +
geom_line(alpha = 0.5) +
facet_wrap('variable', scales = 'free') +
xlab('iterations') +
ggtitle(i_chain) +
scale_y_log10()
ggsave(paste('OUTPUT/MCMC Figures/', DATE, '_', i_chain, '_TracePlots_log.png', sep='', collapse='')
, p.traces_log, height = 8, width = 11)
}
}
# (3) RHats ---------------------------------------------------------------
temp.prsf = df.prsf
temp.prsf[temp.prsf==0] = NA
melt.prsf = melt(temp.prsf, c('region', 'n_vars', 'n_chains'))
melt.prsf = na.omit(melt.prsf)
melt.prsf$value = as.numeric(as.character(melt.prsf$value))
p.rhats = ggplot(melt.prsf, aes(x = variable, y = value, color = region)) +
geom_point(size = 3) +
scale_y_log10() +
geom_hline(color = 'red', yintercept = 1.01) +
geom_hline(color = 'blue', yintercept = 1.1) +
theme_grey(base_size = 12) +
coord_flip() +
ylab('RHat') +
xlab('chain iteration') +
facet_wrap('n_vars', scales = 'free')
p.rhats
ggsave(paste('OUTPUT/MCMC Figures/', DATE, '_GMBConvergenceRhats.png', sep='', collapse='')
, p.rhats, height = 6, width = 12)
# (4) Adhoc ---------------------------------------------------------------
v.nonConvergent_2021_03_021 = c(3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20)
i_chain = 'nyc5'
temp.chains = ls.plotChains[[i_chain]]
temp.chains$converged = T
temp.chains[temp.chains$i_chain %in% v.nonConvergent_2021_03_021, 'converged'] = F
temp.chains = na.omit(temp.chains)
p.traces = ggplot(temp.chains, aes(x = idx, y = value, color = i_chain, alpha = converged)) +
theme_grey(base_size=14) +
geom_line() +
facet_wrap('variable', scales = 'free') +
xlab('iterations') +
ggtitle(i_chain)
ggsave(paste('OUTPUT/MCMC Figures/', DATE, '_', i_chain, '_TracePlots_zoom.png', sep='', collapse='')
, p.traces, height = 10, width = 22)
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
require(cowplot)
require(gridExtra)
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
install.packages("MASS")
rm(list=ls())
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/FindMLEs.R')
v.files = list.files('OUTPUT/', pattern = 'chain')
v.files
b.filter = grepl(v.files, 'NVarsFit5')
b.filter
b.filter = grepl('NVarsFit5',v.files)
v.files = list.files('OUTPUT/', pattern = 'chain')
b.filter = grepl('NVarsFit5', v.files)
b.filter
v.files = v.files[b.filter]
v.files
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/FindMLEs.R')
v.files = paste('OUTPUT/', v.files, sep='')
v.files
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/FindMLEs.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/FindMLEs.R')
temp.dfChains
t(temp.dfChains)
temp.lsChains[[1]]
read.csv(v.files[[1]])
v.files[1]
for(location in c('nyc')){#}, 'sflor', 'wash')){
b.loc = grepl(location, v.files)
temp.files = v.files[b.loc]
temp.lsChains = sapply(temp.files, function(x){df.in = read.csv(x)})
temp.dfChains = do.call('rbind', temp.lsChains)
}
temp.lsChains
temp.lsChains[[1]]
temp.lsChains = sapply(temp.files, function(x){df.in = as.data.frame(read.csv(x))})
temp.lsChains
temp.lsChains = sapply(temp.files, function(x){df.in = list(as.data.frame(read.csv(x)))})
temp.lsChains
temp.dfChains = do.call('rbind', temp.lsChains)
temp.dfChains
dim(temp.dfChains)
require(MASS)
fitdistr(temp.dfChains_sub[,1],'normal')
temp.dfChains_sub = temp.dfChains[,1:6]
fitdistr(temp.dfChains_sub[,1],'normal').
fitdistr(temp.dfChains_sub[,1],'normal')
temp.res = apply(temp.dfChains_sub, 2, function(x){fitdistr(x,'normal')})
temp.res
temp.res = apply(temp.dfChains_sub, 2, function(x){fitdistr(x,'normal')$mean})
temp.res
fitdistr(temp.dfChains_sub[,1],'normal')
fitdistr(temp.dfChains_sub[,1],'normal')$mean
fitdistr(temp.dfChains_sub[,1],'normal')[['mean']]
fitdistr(temp.dfChains_sub[,1],'normal')@mean
fitdistr(temp.dfChains_sub[,1],'normal')[1]
fitdistr(temp.dfChains_sub[,1],'normal')[1][1]
fitdistr(temp.dfChains_sub[,1],'normal')[1][[1]]
fitdistr(temp.dfChains_sub[,1],'normal')[[1]]
fitdistr(temp.dfChains_sub[,1],'normal')[[1]][1]
temp.res = apply(temp.dfChains_sub, 2, function(x){fitdistr(x,'normal')[[1]][1]})
temp.res
fitdistr(temp.dfChains_sub[,1],'normal')[[1]][1]temp.res
temp.res
temp.res
temp.res$loc
temp.res$loc = 1
temp.res
temp.res = apply(temp.dfChains_sub, 2, function(x){fitdistr(x,'normal')[[1]][1]})
temp.res['hi'] = 3
temp.res
temp.res = data.frame(temp.res)
temp.res
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/FindMLEs.R')
df.out
ls.out
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/FindMLEs.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/FindMLEs.R')
df.out
write.csv(df.out, '2021-06-16_MLEs.csv')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/FindMLEs.R')
temp.dfChains
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/FindMLEs.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/FindMLEs.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/FindMLEs.R')
write.csv(df.out, '2021-06-17_MLEs.csv')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/FindMLEs.R')
temp.res
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/FindMLEs.R')
temp.dfChains_sub
temp.dfChains[which(temp.dfChains$LogLikelihood==max(temp.dfChains))]
temp.dfChains[which(temp.dfChains$LogLikelihood==max(temp.dfChains)),]
which(temp.dfChains$LogLikelihood==max(temp.dfChains))
temp.dfChains[which(temp.dfChains$LogLikelihood==max(temp.dfChains$LogLikelihood)),]
unique(temp.dfChains[which(temp.dfChains$LogLikelihood==max(temp.dfChains$LogLikelihood)),])
rm(list=ls())
require(MASS)
v.files = list.files('OUTPUT/', pattern = 'chain')
v.files = paste('OUTPUT/', v.files, sep='')
b.filter = grepl('NVarsFit5', v.files)
v.files = v.files[b.filter]
ls.out = list()
ls.out2 = list()
for(location in c('nyc', 'sflor', 'wash')){
b.loc = grepl(location, v.files)
temp.files = v.files[b.loc]
temp.lsChains = sapply(temp.files, function(x){df.in = list(as.data.frame(read.csv(x)))})
temp.dfChains = do.call('rbind', temp.lsChains)
temp.dfChains_sub = temp.dfChains[,-ncol(temp.dfChains)]
temp.res = apply(temp.dfChains_sub, 2, function(x){fitdistr(x,'normal')[[1]][1]})
ls.out[[location]] = temp.res
ls.out2[[location]] = unique(temp.dfChains[which(temp.dfChains$LogLikelihood==max(temp.dfChains$LogLikelihood)),])
}
df.out = do.call('rbind', ls.out)
df.logout = do.call('rbind', ls.out2)
df.out
df.logout
write.csv(df.logout, '2021-06-17_MLEs_by_LL.csv')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/FindMLEs.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
p.rhats = ggplot(melt.prsf, aes(x = variable, y = value, color = region)) +
geom_point(size = 3) +
scale_y_log10() +
geom_hline(color = 'red', yintercept = 1.01) +
geom_hline(color = 'blue', yintercept = 1.1) +
theme_grey(base_size = 12) +
coord_flip() +
ylab('RHat') +
xlab('chain iteration') +
facet_wrap('n_vars')
p.rhats
ggsave(paste('OUTPUT/MCMC Figures/', DATE, '_GMBConvergenceRhats.png', sep='', collapse='')
, p.rhats, height = 4, width = 6)
melt.prsf
melt.prsf$variable
melt.prsf$variable = factor(melt.prsf$variable, levels = rev(levels(melt.prsf$variable)))
p.rhats = ggplot(melt.prsf, aes(x = variable, y = value, color = region)) +
geom_point(size = 3) +
scale_y_log10() +
geom_hline(color = 'red', yintercept = 1.01) +
geom_hline(color = 'blue', yintercept = 1.1) +
theme_grey(base_size = 12) +
coord_flip() +
ylab('RHat') +
xlab('chain iteration') +
facet_wrap('n_vars')
p.rhats
ggsave(paste('OUTPUT/MCMC Figures/', DATE, '_GMBConvergenceRhats.png', sep='', collapse='')
, p.rhats, height = 4, width = 6)
melt.prsf$n_vars = paste("N vars fit:", melt.prsf$n_vars)
p.rhats = ggplot(melt.prsf, aes(x = variable, y = value, color = region)) +
geom_point(size = 3) +
scale_y_log10() +
geom_hline(color = 'red', yintercept = 1.01) +
geom_hline(color = 'blue', yintercept = 1.1) +
theme_grey(base_size = 12) +
coord_flip() +
ylab('RHat') +
xlab('chain iteration') +
facet_wrap('n_vars')
p.rhats
ggsave(paste('OUTPUT/MCMC Figures/', DATE, '_GMBConvergenceRhats.png', sep='', collapse='')
, p.rhats, height = 4, width = 6)
temp.prsf = df.prsf
temp.prsf[temp.prsf==0] = NA
melt.prsf = melt(temp.prsf, c('region', 'n_vars', 'n_chains'))
melt.prsf = na.omit(melt.prsf)
melt.prsf$value = as.numeric(as.character(melt.prsf$value))
melt.prsf$variable = factor(melt.prsf$variable, levels = rev(levels(melt.prsf$variable)))
melt.prsf$n_vars = paste("N vars fit:", melt.prsf$n_vars)
p.rhats = ggplot(melt.prsf, aes(x = variable, y = value, color = region)) +
geom_point(size = 3) +
scale_y_log10() +
geom_hline(color = 'red', yintercept = 1.01) +
geom_hline(color = 'blue', yintercept = 1.1) +
theme_grey(base_size = 12) +
coord_flip() +
ylab('RHat') +
facet_wrap('n_vars')
p.rhats
ggsave(paste('OUTPUT/MCMC Figures/', DATE, '_GMBConvergenceRhats.png', sep='', collapse='')
, p.rhats, height = 4, width = 6)
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
temp.prsf = df.prsf
temp.prsf[temp.prsf==0] = NA
melt.prsf = melt(temp.prsf, c('region', 'n_vars', 'n_chains'))
melt.prsf = na.omit(melt.prsf)
melt.prsf$value = as.numeric(as.character(melt.prsf$value))
melt.prsf$variable = factor(melt.prsf$variable, levels = rev(levels(melt.prsf$variable)))
melt.prsf$n_vars = paste("N vars fit:", melt.prsf$n_vars)
p.rhats = ggplot(melt.prsf, aes(x = variable, y = value, color = region)) +
geom_point(size = 3) +
scale_y_log10() +
geom_hline(color = 'red', yintercept = 1.01) +
geom_hline(color = 'blue', yintercept = 1.1) +
theme_grey(base_size = 12) +
coord_flip() +
ylab('RHat') +
xlab('') +
facet_wrap('n_vars')
p.rhats
ggsave(paste('OUTPUT/MCMC Figures/', DATE, '_GMBConvergenceRhats.png', sep='', collapse='')
, p.rhats, height = 4, width = 6)
temp.prsf = df.prsf
temp.prsf[temp.prsf==0] = NA
melt.prsf = melt(temp.prsf, c('region', 'n_vars', 'n_chains'))
melt.prsf = na.omit(melt.prsf)
melt.prsf$value = as.numeric(as.character(melt.prsf$value))
melt.prsf$variable = factor(melt.prsf$variable, levels = rev(levels(melt.prsf$variable)))
melt.prsf$n_vars = paste("N vars fit:", melt.prsf$n_vars)
p.rhats = ggplot(melt.prsf, aes(x = variable, y = value, color = region)) +
geom_point(size = 3) +
scale_y_log10() +
geom_hline(color = 'red', yintercept = 1.01) +
geom_hline(color = 'blue', yintercept = 1.1) +
theme_grey(base_size = 12) +
coord_flip() +
ylab('RHat') +
xlab('') +
facet_wrap('n_vars')
p.rhats
ggsave(paste('OUTPUT/MCMC Figures/', DATE, '_GMBConvergenceRhats.png', sep='', collapse='')
, p.rhats, height = 4, width = 6)
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
# Contours
if(T){
for(REGION in c('nyc', 'sflor', 'wash')){
for(i in 2:11){
test = ls.chains[[REGION]]
test = test[test$i_chain == i,v.variables] # obtain variables
p_pairs = ggpairs(test, lower = list(continuous = "density"))
# Combinations
v.names = 1:ncol(test)
names(v.names) = colnames(test)
v.combs = t(combn(v.names, 2))
for(j in 1:nrow(v.combs)){
j_comb = v.combs[j,]
p_pairs[j_comb[2], j_comb[1]] = p_pairs[j_comb[2], j_comb[1]] +
scale_x_continuous(limits=c(df.constraints[j_comb[1]][1,1]
, df.constraints[j_comb[1]][2,1])) +
scale_y_continuous(limit=c(df.constraints[j_comb[2]][1,1]
, df.constraints[j_comb[2]][2,1]))
}
for(j in 1:ncol(test)){
p_pairs[j, j] = p_pairs[j, j] +
scale_x_continuous(limits=c(df.constraints[1,j]
, df.constraints[2,j]))
}
ggsave(paste('OUTPUT/MCMC Figures/', DATE, '_', REGION, '_countour_', i, '.png', sep='', collapse='')
, p_pairs
, 'png'
, width = 12
, height = 12)
}
}
}
test = ls.chains[[REGION]]
test = test[test$i_chain == i,v.variables] # obtain variables
p_pairs = ggpairs(test, lower = list(continuous = "density"))
ggpairs(test, lower = list(continuous = "density"))
test
ls.chains
ls.chains  [['nyc']]
ls.chains[['nyc']]
names(ls.chains)
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
ls.chains[['nyc5']]
names(ls.chains)
ls.chains
head(ls.chains[[1]])
head(ls.chains[[2]])
ls.chains[[names(ls.chains=='nyc5')]]
v.chains
length(ls.chains[['nyc5']])
length(ls.chains[[1]])
b.chains_in = names(ls.chains=='nyc5')
b.chains_in = names(ls.chains)=='nyc5'
length(ls.chains[[b.chains_in]])
length(ls.chains[b.chains_in])
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman Covid SeroPos/Serological_Shielding/MCMC_CODE/Matlab/MCMC_Visualize_traces.R')
v.variables
colnames(test)
# Contours
if(T){
for(REGION in c('nyc5', 'sflor5', 'wash5')){
for(i in 2:11){
b.chains_in = names(ls.chains)==REGION
test = do.call('rbind', ls.chains[b.chains_in])
test = test[test$i_chain == i,v.variables[1:5]] # obtain variables
p_pairs = ggpairs(test, lower = list(continuous = "density"))
# Combinations
v.names = 1:ncol(test)
names(v.names) = colnames(test)
v.combs = t(combn(v.names, 2))
for(j in 1:nrow(v.combs)){
j_comb = v.combs[j,]
p_pairs[j_comb[2], j_comb[1]] = p_pairs[j_comb[2], j_comb[1]] +
scale_x_continuous(limits=c(df.constraints[j_comb[1]][1,1]
, df.constraints[j_comb[1]][2,1])) +
scale_y_continuous(limit=c(df.constraints[j_comb[2]][1,1]
, df.constraints[j_comb[2]][2,1]))
}
for(j in 1:ncol(test)){
p_pairs[j, j] = p_pairs[j, j] +
scale_x_continuous(limits=c(df.constraints[1,j]
, df.constraints[2,j]))
}
ggsave(paste('OUTPUT/MCMC Figures/', DATE, '_', REGION, '_countour_', i, '.png', sep='', collapse='')
, p_pairs
, 'png'
, width = 12
, height = 12)
}
}
}
# Contours
if(T){
for(REGION in c('nyc5', 'sflor5', 'wash5')){
for(i in 1:1){
b.chains_in = names(ls.chains)==REGION
test = do.call('rbind', ls.chains[b.chains_in])
test = test[test$i_chain == i,v.variables[1:5]] # obtain variables
p_pairs = ggpairs(test, lower = list(continuous = "density"))
# Combinations
v.names = 1:ncol(test)
names(v.names) = colnames(test)
v.combs = t(combn(v.names, 2))
for(j in 1:nrow(v.combs)){
j_comb = v.combs[j,]
p_pairs[j_comb[2], j_comb[1]] = p_pairs[j_comb[2], j_comb[1]] +
scale_x_continuous(limits=c(df.constraints[j_comb[1]][1,1]
, df.constraints[j_comb[1]][2,1])) +
scale_y_continuous(limit=c(df.constraints[j_comb[2]][1,1]
, df.constraints[j_comb[2]][2,1]))
}
for(j in 1:ncol(test)){
p_pairs[j, j] = p_pairs[j, j] +
scale_x_continuous(limits=c(df.constraints[1,j]
, df.constraints[2,j]))
}
ggsave(paste('OUTPUT/MCMC Figures/', DATE, '_', REGION, '_countour_', i, '.png', sep='', collapse='')
, p_pairs
, 'png'
, width = 12
, height = 12)
}
}
}
